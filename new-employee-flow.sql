-- This script sets up the necessary tables for the employee activity tracking feature.

-- Create the 'employees' table to store credentials and track key data for each employee.
-- Note: This assumes the 'id' will be a UUID, compatible with Supabase Auth.
CREATE TABLE IF NOT EXISTS public.employees (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    employee_unique_id TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    first_login_timestamp TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create the 'members' table to store information for each member added by an employee.
CREATE TABLE IF NOT EXISTS public.members (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name TEXT NOT NULL,
    ward TEXT NOT NULL,
    district TEXT NOT NULL,
    added_by_employee_id UUID REFERENCES public.employees(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create a function to automatically update the 'updated_at' timestamp on the 'employees' table.
CREATE OR REPLACE FUNCTION public.handle_employees_update()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to call the function when an employee record is updated.
CREATE OR REPLACE TRIGGER on_employee_update
BEFORE UPDATE ON public.employees
FOR EACH ROW
EXECUTE PROCEDURE public.handle_employees_update();

-- Note for Admin:
-- To add a new employee, you would typically use a secure backend function.
-- For now, you can insert a new employee directly into the database.
-- IMPORTANT: You need to generate a secure hash for the password.
-- Example of inserting an employee (replace with a real password hash):
-- INSERT INTO public.employees (employee_unique_id, password_hash)
-- VALUES ('employee1', 'a_very_secure_password_hash_here');
